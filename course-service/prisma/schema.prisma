// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üî• Enum for Course Access Levels
enum CourseAccess {
  FREE
  PAID
  PRIVATE
}

// üî• Enum for Lesson Type (Regular Lesson or Quiz)
enum LessonType {
  LESSON
  QUIZ
}

// üî• Enum for Video Status
enum VideoStatus {
  PENDING // Uploaded but not processed
  PROCESSING // FFmpeg is transcoding
  COMPLETED // Transcoding done, ready to stream
  FAILED // Something went wrong
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// üî• Course Model
// model Course {
//   id          String       @id @default(uuid())
//   title       String
//   description String?
//   spaceId     String // Reference to Space (Community Service)
//   createdBy   String // Reference to User Service
//   price       Float? // If paid
//   accessType  CourseAccess @default(FREE)
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt

//   // Relations
//   space       Space         @relation(fields: [spaceId], references: [id])
//   user        User          @relation(fields: [createdBy], references: [id])
//   sections    Section[]     @relation(name: "CourseToSections")
//   lessons     Lesson[]      @relation(name: "CourseToLessons") // Standalone Lessons
//   enrollment  Enrollment[]
//   certificate Certificate[]
// }

model Course {
  id          String       @id @default(uuid())
  title       String
  description String?
  moduleId    String
  createdBy   String // Reference to User Service
  price       Float? // If paid
  accessType  CourseAccess @default(FREE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user        User          @relation(fields: [createdBy], references: [id])
  sections    Section[]     @relation(name: "CourseToSections")
  // lessons     Lesson[]      @relation(name: "CourseToLessons")
  enrollment  Enrollment[]
  certificate Certificate[]
  Space       Space?        @relation(fields: [spaceId], references: [id])
  spaceId     String?
}

// üî• Section Model (Grouping Lessons)
model Section {
  id       String @id @default(uuid())
  title    String
  courseId String
  position Int // Order of the section

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], name: "CourseToSections")
  lessons Lesson[] @relation(name: "SectionToLessons")
}

// üî• Lesson Model
model Lesson {
  id           String     @id @default(uuid())
  title        String
  content      String? // Markdown Content
  type         LessonType @default(LESSON) // Either LESSON or QUIZ
  sectionId    String? // Nullable: Standalone Lesson
  moduleId     String
  position     Int // Order within course
  isLocked     Boolean    @default(false) // üî• Drip Content (Unlocking Lessons)
  unlocksAfter String? // Reference to previous lesson that must be completed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  section     Section?     @relation(fields: [sectionId], references: [id], name: "SectionToLessons")
  // course      Course       @relation(fields: [courseId], references: [id], name: "CourseToLessons")
  attachments Attachment[]
  // quiz        Quiz?
  video       Video?
  // Course      Course?      @relation(fields: [courseId], references: [id])
  courseId    String?
}

// üî• Video Model
model Video {
  id             String @id @default(uuid())
  lessonId       String @unique // Each lesson has one video
  rawUrl         String // S3 URL of the raw uploaded video
  transcodedUrls Json // Store multiple transcoded versions (e.g., 480p, 720p, 1080p)
  status         String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

// üî• Attachment Model (Downloads, Assignments)
model Attachment {
  id       String @id @default(uuid())
  lessonId String
  fileUrl  String
  fileName String

  createdAt DateTime @default(now())

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

// üî• Quiz Model
model Quiz {
  id          String   @id @default(uuid())
  moduleId    String   @unique
  createdBy   String
  title       String
  description String?
  totalMarks  Int
  duration    Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User          @relation(fields: [createdBy], references: [id])
  // lesson      Lesson        @relation(fields: [lessonId], references: [id])
  questions   Question[]
  quizAttempt QuizAttempt[]
}

// üî• Question Model
model Question {
  id              String     @id @default(uuid())
  quizId          String
  question        Json
  correctOptionId String     @unique
  explanation     String?
  difficulty      Difficulty @default(EASY)

  // Relations
  answer        Answer[]
  options       Option[] @relation("QuestionToOptions")
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  correctOption Option   @relation("CorrectOptionRelation", fields: [correctOptionId], references: [id])
}

// model Option {
model Option {
  id         String @id @default(uuid())
  questionId String
  option     Json

  // Relations
  question           Question  @relation("QuestionToOptions", fields: [questionId], references: [id])
  correctForQuestion Question? @relation("CorrectOptionRelation")
}

model QuizAttempt {
  id        String    @id @default(uuid())
  quizId    String
  userId    String
  score     Int       @default(0)
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  // ‚è∏Ô∏è Pause/Resume Support
  pausedAt            DateTime? // Last paused time
  resumedAt           DateTime? // Last resumed time
  totalElapsedSeconds Int       @default(0) // Accumulated time spent (in seconds)

  // Relations
  answers Answer[]
  user    User     @relation(fields: [userId], references: [id])
  quiz    Quiz     @relation(fields: [quizId], references: [id])
}

model Answer {
  id               String  @id @default(uuid())
  questionId       String
  selectedOptionId String
  attemptId        String
  isCorrect        Boolean

  // Relations
  question Question    @relation(fields: [questionId], references: [id])
  attempt  QuizAttempt @relation(fields: [attemptId], references: [id])
}

// üî• Enrollment Model (For tracking progress)
model Enrollment {
  id       String @id @default(uuid())
  userId   String // Reference to User Service
  courseId String
  progress Float  @default(0) // Percentage completion

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

// üî• Certification Model (If you want to track certificates)
model Certificate {
  id       String   @id @default(uuid())
  userId   String
  courseId String
  issuedAt DateTime @default(now())

  // Relations
  course Course @relation(fields: [courseId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

// üî• User Model (FK Reference to User Service)
model User {
  id          String        @id @default(uuid())
  course      Course[]
  enrollment  Enrollment[]
  certificate Certificate[]
  quiz        Quiz[]
  quizAttempt QuizAttempt[]
}

// üî• Space Model (FK Reference to Community Service)
model Space {
  id     String   @id @default(uuid())
  course Course[]
}
