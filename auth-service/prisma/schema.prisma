// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // id            Int            @id @default(autoincrement())
  id            String         @id @default(uuid())
  username      String
  email         String         @unique
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  refreshTokens RefreshToken[]
  userRole      UserRole[]

  // âœ… Added Zoom OAuth fields  
  zoomAccessToken  String?
  zoomRefreshToken String?
  zoomTokenExpiry  DateTime?
}

model RefreshToken {
  id           String   @id @default(uuid())
  refreshToken String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model Role {
  id          String           @id @default(uuid())
  role        String           @unique
  permissions RolePermission[]
  userRole    UserRole[]
}

model Permission {
  id       String           @id @default(uuid())
  action   String           @unique
  resource String
  roles    RolePermission[]

  @@unique([action, resource])
}

model UserRole {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}
