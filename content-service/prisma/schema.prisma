// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// âœ… Enum for Content Status
enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// âœ… ContentType Table (For Extendability)
model ContentType {
  id        String   @id @default(uuid())
  name      String   @unique // POSTS, EVENTS, CHATS, IMAGES
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  contents Content[]
}

// âœ… Content Table (Stores Metadata & Links to Space)
model Content {
  id            String        @id @default(uuid())
  title         String
  description   String?
  contentTypeId String // FK to ContentType
  spaceId       String // ðŸ”¥ Store Space ID (Foreign Key from Community Service)
  createdBy     String // ðŸ”¥ Store User ID (Foreign Key from User Service)
  status        ContentStatus @default(DRAFT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations  
  contentType ContentType @relation(fields: [contentTypeId], references: [id])

  // âœ… Corrected Relations (Added `references` on child models)
  postContent  Posts?
  eventContent Events?
  chatContent  Chats?
  imageContent Images?
}

// âœ… Separate Tables for Each Content Type

// ðŸ”¥ Posts (Text-based Content)
model Posts {
  id        String   @id @default(uuid())
  contentId String   @unique // FK to Content
  title     String // ðŸ”¥ Post title
  content   Json // ðŸ”¥ Editor.js JSON data (specific to posts)
  createdBy String // ðŸ”¥ User who created the content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentRel Content @relation(fields: [contentId], references: [id])
}

// ðŸ”¥ Events (With Date & Location)
model Events {
  id        String   @id @default(uuid())
  contentId String   @unique // FK to Content
  eventDate DateTime
  location  String?
  createdBy String // ðŸ”¥ User who created the content

  // âœ… Zoom Integration Fields
  zoomMeetingId String? // ðŸ”¥ Unique Meeting ID from Zoom
  zoomHostId    String? // ðŸ”¥ Host ID from Zoom
  zoomJoinUrl   String? // ðŸ”¥ Participant Join Link
  zoomStartUrl  String? // ðŸ”¥ Host Start Link

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentRel Content @relation(fields: [contentId], references: [id])
}

// ðŸ”¥ Chats (Messages)
model Chats {
  id        String   @id @default(uuid())
  contentId String   @unique // FK to Content
  message   String
  createdBy String // ðŸ”¥ User who created the content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentRel Content @relation(fields: [contentId], references: [id])
}

// ðŸ”¥ Images (With Image URL)
model Images {
  id        String   @id @default(uuid())
  contentId String   @unique // FK to Content
  imageUrl  String
  createdBy String // ðŸ”¥ User who created the content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentRel Content @relation(fields: [contentId], references: [id])
}

// ðŸ”¥ User Model (Only FK Reference to User Service)
model User {
  id String @id @default(uuid())
}
